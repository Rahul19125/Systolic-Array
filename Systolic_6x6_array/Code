`timescale 1ns / 1ps
//systolic 6x6 matrix 
module systolic_6x6_array(
   input clk, input reset,input [1:0] select,
   
   output [31:0] a0_out,a1_out,a2_out,
   output [31:0] b0_out,b1_out,b2_out
    );
    
  // created A_Memory and B_memory containing 6X6 matrix
  reg [31:0] A_mem[0:5][0:5];
  reg [31:0] B_mem[0:5][0:5];
  
  //this  will act input to the systolic 3x3 (row wise ) 
  reg [31:0] a0_outt , a1_outt, a2_outt ;
  //column wise 
  reg [31:0] b0_outt , b1_outt, b2_outt ;
  
  reg [2:0] row_counter;   
  reg [2:0] col_counter; 
   
   initial begin
      row_counter <= 3'd0;
      col_counter <= 3'd0;
      //mapping of elements in A memory
      A_mem[0][0] <= 32'd1; A_mem[0][1] <= 32'd0; A_mem[0][2] <= 32'd1; A_mem[0][3] <= 32'd1; A_mem[0][4] <= 32'd2; A_mem[0][5] <= 32'd2;
      A_mem[1][0] <= 32'd3; A_mem[1][1] <= 32'd2; A_mem[1][2] <= 32'd1; A_mem[1][3] <= 32'd2; A_mem[1][4] <= 32'd1; A_mem[1][5] <= 32'd1;
      A_mem[2][0] <= 32'd1; A_mem[2][1] <= 32'd0; A_mem[2][2] <= 32'd2; A_mem[2][3] <= 32'd1; A_mem[2][4] <= 32'd2; A_mem[2][5] <= 32'd1;
      A_mem[3][0] <= 32'd2; A_mem[3][1] <= 32'd1; A_mem[3][2] <= 32'd0; A_mem[3][3] <= 32'd1; A_mem[3][4] <= 32'd0; A_mem[3][5] <= 32'd0;
      A_mem[4][0] <= 32'd3; A_mem[4][1] <= 32'd3; A_mem[4][2] <= 32'd3; A_mem[4][3] <= 32'd1; A_mem[4][4] <= 32'd1; A_mem[4][5] <= 32'd1;
      A_mem[5][0] <= 32'd2; A_mem[5][1] <= 32'd2; A_mem[5][2] <= 32'd2; A_mem[5][3] <= 32'd2; A_mem[5][4] <= 32'd2; A_mem[5][5] <= 32'd2;

      // mapping of elemts in B memory
      B_mem[0][0] <= 32'd2; B_mem[0][1] <= 32'd2; B_mem[0][2] <= 32'd3; B_mem[0][3] <= 32'd3; B_mem[0][4] <= 32'd2; B_mem[0][5] <= 32'd1;
      B_mem[1][0] <= 32'd3; B_mem[1][1] <= 32'd2; B_mem[1][2] <= 32'd1; B_mem[1][3] <= 32'd2; B_mem[1][4] <= 32'd1; B_mem[1][5] <= 32'd0;
      B_mem[2][0] <= 32'd2; B_mem[2][1] <= 32'd2; B_mem[2][2] <= 32'd2; B_mem[2][3] <= 32'd1; B_mem[2][4] <= 32'd1; B_mem[2][5] <= 32'd2;
      B_mem[3][0] <= 32'd2; B_mem[3][1] <= 32'd3; B_mem[3][2] <= 32'd2; B_mem[3][3] <= 32'd1; B_mem[3][4] <= 32'd2; B_mem[3][5] <= 32'd1;
      B_mem[4][0] <= 32'd2; B_mem[4][1] <= 32'd3; B_mem[4][2] <= 32'd2; B_mem[4][3] <= 32'd1; B_mem[4][4] <= 32'd1; B_mem[4][5] <= 32'd3;
      B_mem[5][0] <= 32'd3; B_mem[5][1] <= 32'd3; B_mem[5][2] <= 32'd3; B_mem[5][3] <= 32'd2; B_mem[5][4] <= 32'd1; B_mem[5][5] <= 32'd1;
   end
    
    
  always @(posedge clk or posedge reset) begin
   if (reset) begin
      a0_outt <= 32'd0;
      a1_outt <= 32'd0;
      a2_outt <= 32'd0;
      b0_outt <= 32'd0;
      b1_outt <= 32'd0;
      b2_outt <= 32'd0;
    
     end 
     else if (1) begin
       
       case (select)
       //mapping of elements in 6x6 matrix divided into 4 blocks of 3x3 matrix Based on Select line
        2'b00: begin
          a0_outt <= A_mem[0][row_counter];
          a1_outt <= A_mem[1][row_counter];
          a2_outt <= A_mem[2][row_counter];

          b0_outt <= B_mem[col_counter][0];
          b1_outt <= B_mem[col_counter][1];
          b2_outt <= B_mem[col_counter][2];
        end
        
        2'b01: begin
          a0_outt <= A_mem[0][row_counter];
          a1_outt <= A_mem[1][row_counter];
          a2_outt <= A_mem[2][row_counter];

          b0_outt <= B_mem[col_counter][3];
          
          b1_outt <= B_mem[col_counter][4];
          b2_outt <= B_mem[col_counter][5];
        end
        2'b10: begin
          a0_outt <= A_mem[3][row_counter];
          a1_outt <= A_mem[4][row_counter];
          a2_outt <= A_mem[5][row_counter];

          b0_outt <= B_mem[col_counter][0];
          b1_outt <= B_mem[col_counter][1];
          b2_outt <= B_mem[col_counter][2];
        end
        2'b11: begin
          a0_outt <= A_mem[3][row_counter];
          a1_outt <= A_mem[4][row_counter];
          a2_outt <= A_mem[5][row_counter];

          b0_outt <= B_mem[col_counter][3];
        
          b1_outt <= B_mem[col_counter][4];
          b2_outt <= B_mem[col_counter][5];       
        end
      endcase

      
      if (row_counter < 5)
        row_counter <= row_counter + 1;
      else
        row_counter <= 0;

      if (col_counter < 5)
        col_counter <= col_counter + 1;
      else
        col_counter <= 0;
                end
              end
        // assigning values to these variables which will act as input to 3x3 systolic
      assign a0_out = a0_outt;
      assign a1_out = a1_outt;
      assign a2_out = a2_outt;
      assign b0_out = b0_outt;
      assign b1_out = b1_outt;
      assign b2_out = b2_outt;

        endmodule 


//systolic array multiplier consisting of 9 processesing elements 
    module systolic_array(
        clk,reset,a0_out,a1_out,a2_out,
        b0_out,b1_out,b2_out,c1,c2,c3,c4,c5,c6,c7,c8,c9
    );
    
        parameter data_size = 32;
        input clk,reset;
        // acting inputs to the processing elements PE11 , PE21,PE31 
        input wire signed [data_size -1:0]a0_out,a1_out,a2_out;
        //acting inputs to the processing elements PE11, PE12, PE13
        input wire signed [data_size -1:0] b0_out,b1_out,b2_out;
        //outputs of the  9 processing elements
        output wire signed [2*data_size -1:0] c1,c2,c3,c4,c5,c6,c7,c8,c9;
     
     
     // intermediate wires for connecting PEs
       wire signed [data_size-1:0] b2d,b22d,b3d,b33d,a2d,a22d,a3d,a33d,am1h,bm1v,am2h,bm2v,am3h,bm3v,am4h,bm4v,am5h,bm5v,am6h,bm6v,am7h,bm7v,am8h,bm8v,am9h,bm9v;  
        
        PE pe11 (.clk(clk),.reset(reset), .a_in(a0_out),.b_in(b0_out),.a_out(am1h),.b_out(bm1v),.c_out(c1));
        
        dff g1 (.clk(clk), .reset(reset),.d(b1_out),.q(b2d));
        PE pe12 (.clk(clk),.reset(reset), .a_in(am1h),.b_in(b2d),.a_out(am2h),.b_out(bm2v),.c_out(c2));
        
        dff g2(.clk(clk),.reset(reset),.d(b2_out),.q(b3d));
        dff g3(.clk(clk),.reset(reset),.d(b3d),.q(b33d));
        PE pe13 (.clk(clk),.reset(reset), .a_in(am2h),.b_in(b33d),.a_out(am3h ),.b_out( bm3v),.c_out(c3));
        
        dff g4(.clk(clk),.reset(reset),.d(a1_out),.q(a2d));
        PE pe21 (.clk(clk),.reset(reset), .a_in(a2d),.b_in(bm1v),.a_out(am4h),.b_out(bm4v),.c_out(c4));
 
        PE pe22 (.clk(clk),.reset(reset), .a_in(am4h),.b_in(bm2v),.a_out(am5h),.b_out(bm5v),.c_out(c5));
        PE pe23 (.clk(clk),.reset(reset), .a_in(am5h),.b_in(bm3v),.a_out(am6h ),.b_out(bm6v ),.c_out(c6));
        
        dff g5(.clk(clk),.reset(reset),.d(a2_out),.q(a3d));
        dff g6(.clk(clk),.reset(reset),.d(a3d),.q(a33d));
        
        PE pe31 (.clk(clk),.reset(reset), .a_in(a33d),.b_in(bm4v),.a_out(am7h),.b_out( bm7v),.c_out(c7));
        
        PE pe32 (.clk(clk),.reset(reset), .a_in(am7h),.b_in(bm5v),.a_out(am8h),.b_out( bm8v),.c_out(c8));
        PE pe33 (.clk(clk),.reset(reset), .a_in(am8h),.b_in(bm6v),.a_out(am9h ),.b_out(bm9v ),.c_out(c9));
 
    endmodule
    
    //  single processing element  block
    module PE (clk,reset,a_in , b_in,a_out,b_out,c_out);
    parameter data_size = 32;
    input wire clk,reset;
    input wire signed [data_size-1 :0] a_in, b_in;
    output reg signed [data_size-1 :0] a_out, b_out;
    output reg signed [2*data_size-1 :0 ] c_out;
    
    always@(posedge clk)
        begin
        if(reset) begin 
            a_out  <= 0;
            b_out <= 0;
            c_out <= 0;
            
        end 
        else  begin
            c_out <= c_out + (a_in * b_in);
            a_out <= a_in;
            b_out<= b_in;
    
            end 
                end
                    endmodule 
   
    module dff(
      input wire signed [31:0] d,
      input wire clk,
      input wire reset,
      output reg signed [31:0] q
       );
   always @(posedge clk) begin
    if (reset)
      q <= 0;
    else
      q <= d;
    end
    endmodule

//c mapping
    module c_mapping (
        input clk,
        input reset,
        input [1:0] select,
        input signed [63:0] c1, c2, c3,
                            c4, c5, c6,
                            c7, c8, c9,
        output reg signed [63:0] y0,y1,y2,y3,y4,y5,y6,y7,y8
                      
        );

 
      reg [1:0] current_select;
      reg loaded;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
        y0 <= 0; y1 <= 0; y2 <= 0;
        y3 <= 0; y4 <= 0; y5 <= 0;
        y6 <= 0; y7 <= 0; y8 <= 0;
        current_select <= 2'b00;
        loaded <= 0;
    end else begin
        if (!loaded) begin
//             
            case (current_select)
                2'b00,2'b01,   2'b10, 2'b11: begin
                    y0 <= c1; y1 = c2; y2 <= c3;
                    y3 <= c4; y4 = c5; y5 <= c6;
                    y6 <= c7; y7 = c8; y8 <= c9;
                end
            endcase
            loaded <= 1;   
            end else begin
                 
                   y0 <= 0; y1 <= 0;  y2 <= 0;
                   y3 <= 0; y4 <= 0; y5 <= 0;
                   y6 <= 0; y7 <= 0; y8 <= 0;
                   loaded <= 0;
                   current_select <= current_select + 1;   
                        end
                    end
                end
                 
         endmodule       
  

